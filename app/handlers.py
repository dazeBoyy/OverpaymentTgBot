import logging
import re
from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram import Router, F, types
import app.keyboards as keyboard
import app.database.requests as rq



router = Router()


class NewAccounting(StatesGroup):
    accounting_name = State()

    accounting_for_change = None


class NewOverWork(StatesGroup):
    accounting_id = State()
    date = State()
    work_name = State()
    sum = State()
    budget = State()
    picture = State()




@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ —É—á–µ—Ç—É –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫ üëª',
                         reply_markup=keyboard.main)

# –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ —Ö–¥–µ—Å—å,
# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—Ç–∞–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–º–µ—Ä 1 (—ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∞—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤)


@router.message(F.text == '–í—Å–µ —É—á—ë—Ç—ã üíº')
async def get_accountings(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:',
                         reply_markup=await keyboard.accountings(message.from_user.id))
    await message.answer('–õ–∏–±–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —É—á—ë—Ç–æ–º –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:', reply_markup=keyboard.accounting_buttons)


@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å —É—á—ë—Ç üóëÔ∏è')
async def delete_accounting(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:',
                         reply_markup=await keyboard.delete_accountings(message.from_user.id))

@router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–µ—Ç–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫ ‚úèÔ∏è')
async def change_accounting(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ—Ç, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—åüîÅ:',
                         reply_markup=await keyboard.change_accountings(message.from_user.id))


@router.callback_query(F.data.startswith('change_'))
async def change_accounting_callback(callBack: CallbackQuery, state: FSMContext,):
    accounting_id = callBack.data.split('_')[1]
    accounting_for_change = await rq.get_accounting_info_orm(accounting_id)

    NewAccounting.accounting_for_change = accounting_for_change

    await callBack.answer()
    await callBack.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á—ë—Ç–∞:", reply_markup=keyboard.skip_button
    )
    await state.set_state(NewAccounting.accounting_name)


@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—á–µ—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫ üìä')
async def new_accounting(message: Message,  state: FSMContext) -> None:
    await state.set_state(NewAccounting.accounting_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É—á–µ—Ç–∞:", reply_markup=keyboard.cancel
    )
@router.message(StateFilter(NewAccounting.accounting_name), F.text == "–û—Ç–º–µ–Ω–∞")
@router.message(StateFilter("*"), F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω—ã‚õî", reply_markup=keyboard.main)

@router.message(NewAccounting.accounting_name, or_f(F.text, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
async def set_accounting_name(message: Message,  state: FSMContext) -> None:
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(accounting_name=NewAccounting.accounting_for_change.name)
    else:
        if message.content_type != 'text':
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –Ω–µ –±–æ–ª–µ–µ 90 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        if not message.text.strip():
            await message.answer("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–µ—Ç–∞ üíÄ. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return 
        elif len(message.text) >= 90:
            await message.answer(
                "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–≥–∫–∞ –±–æ–ª—å—à–æ–µ ü§è \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"
            )
            return
        await state.update_data(accounting_name=message.text)
    data = await state.get_data()
    if NewAccounting.accounting_for_change:
        await rq.change_accounting(NewAccounting.accounting_for_change.id,
                                   data['accounting_name']
        )
    else:
        await rq.add_accounting(data['accounting_name'],
                                message.from_user.id
                                )
    await message.answer(
        f"–£—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –ª–∏–±–æ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∞—à–∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏, –ø–µ—Ä–µ–π–¥—è –≤ —Ä–∞–∑–¥–µ–ª '–í—Å–µ —É—á—ë—Ç—ã'. –ò –≤—ã–±—Ä–∞—Ç—å, —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —É—á—ë—Ç –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π. üìù‚ú®", reply_markup=keyboard.main)
    await state.clear()
    NewAccounting.accounting_for_change = None
@router.callback_query(F.data.startswith('delete_'))
async def delete_accounting_callback(callBack: CallbackQuery):
    accounting_id = callBack.data.split('_')[1]
    await rq.delete_accounting_orm(int(accounting_id))
    await callBack.answer("–£—á—ë—Ç —É–¥–∞–ª—ë–Ω‚ùå")
    await callBack.message.answer("–£—á—ë—Ç —É–¥–∞–ª—ë–Ω!‚ùå")

@router.callback_query(F.data.startswith('overwork_'))
async def get_overwoks_data(callBack: CallbackQuery, state: FSMContext):
    accounting_id = callBack.data.split('_')[1]
    await callBack.message.answer('–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫üìÉ: ',
                                  reply_markup= await keyboard.overwork_data(callBack.data.split('_')[1]))
    await callBack.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=await keyboard.overwork_data_regular())
    await state.update_data(accounting_id=accounting_id)


@router.callback_query(F.data.startswith('data_'))
async def get_overwork(callBack: CallbackQuery):
    overwork_id = callBack.data.split('_')[1]
    overwork_data = await rq.get_overwork(overwork_id)
    formatted_date = overwork_data.date.strftime("%d.%m")
    caption = f"<b>–î–∞—Ç–∞:</b> {formatted_date}\n" \
              f"<b>–†–∞–±–æ—Ç–∞:</b> {overwork_data.work}\n" \
              f"<b>–°—É–º–º–∞:</b> {round(overwork_data.sum, 2)} —Ä—É–±\n" \
              f"<b>–ë—é–¥–∂–µ—Ç:</b> {overwork_data.budget}"
    await callBack.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard.on_main)
    await callBack.message.answer_photo(
        photo=overwork_data.picture,
        caption=caption,
        reply_markup=await keyboard.overwork_data_action(overwork_data.id),
        parse_mode='HTML'  # –£–∫–∞–∑—ã–≤–∞–µ–º HTML –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )

@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É')
async def add_overwork(message: Message,  state: FSMContext):
    await state.set_state(NewOverWork.date)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º:", reply_markup=keyboard.cancel
    )


@router.message(NewOverWork.date)
async def set_date(message: Message, state: FSMContext) -> None:
    date_pattern = re.compile(r'^\d{2}\.\d{2}$')

    if not date_pattern.match(message.text):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 05.01:"
        )
        return

    await state.update_data(date=message.text)
    await state.set_state(NewOverWork.work_name)
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏:", reply_markup=keyboard.cancel
    )


@router.message(NewOverWork.work_name)
async def set_work_name(message: Message, state: FSMContext) -> None:
    if message.content_type != 'text':
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –Ω–µ –±–æ–ª–µ–µ 120 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    work_name = message.text.strip()

    if not work_name:
        await message.answer(
            "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:"
        )
        return

    if len(work_name) > 120:
        await message.answer(
            "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 120 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:"
        )
        return
    await state.update_data(work_name=message.text)
    await state.set_state(NewOverWork.sum)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç—ã:", reply_markup=keyboard.cancel
    )


@router.message(NewOverWork.sum)
async def set_date(message: Message, state: FSMContext) -> None:
    sum_value = message.text.strip()

    if not sum_value.isdigit():
        await message.answer(
            "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:"
        )
        return
    await state.update_data(sum=int(message.text))
    await state.set_state(NewOverWork.budget)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —á–µ–π –±—ã–ª –±—é–¥–∂–µ—Ç:", reply_markup=keyboard.cancel
    )


@router.message(NewOverWork.budget)
async def set_budget(message: Message, state: FSMContext) -> None:
    if message.content_type != 'text':
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    budget = message.text.strip()

    if not budget:
        await message.answer(
            "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:"
        )
        return

    if len(budget) > 50:
        await message.answer(
            "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:"
        )
        return
    await state.update_data(budget=message.text)
    await state.set_state(NewOverWork.picture)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:", reply_markup=keyboard.skip_button
    )

@router.message(NewOverWork.picture, or_f(F.photo, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
async def set_picture(message: Message, state: FSMContext) -> None:
    if message.text and message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(picture='AgACAgIAAxkBAAIDcGaJorBVLdDkgRvGt_HYMaKCjWnqAAJR5jEbNqNQSOOJ6-10w1x5AQADAgADeQADNQQ')
    else:
        await state.update_data(picture=message.photo[-1].file_id)
    data = await state.get_data()
    await rq.add_overwork(  data['date'],
                            data['work_name'],
                            data['sum'],
                            data['budget'],
                            data['picture'],
                            data['accounting_id']
                            )
    await message.answer(
        f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã‚úîÔ∏è", reply_markup=keyboard.main)
    await state.clear()


@router.message(F.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é')
async def back_to_main(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—á–∫—Éüòä", reply_markup=keyboard.main)