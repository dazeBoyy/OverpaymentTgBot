import logging

from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram import Router, F, types
import app.keyboards as keyboard
import app.database.requests as rq


router = Router()


class NewAccounting(StatesGroup):
    accounting_name = State()


class NewOverWork(StatesGroup):
    accounting_id = State()
    date = State()
    work_name = State()
    sum = State()
    budget = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ —É—á–µ—Ç—É –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫ üëª',
                         reply_markup=keyboard.main)


@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—á–µ—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫ üìä')
async def new_accounting(message: Message,  state: FSMContext) -> None:
    await state.set_state(NewAccounting.accounting_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É—á–µ—Ç–∞", reply_markup=types.ReplyKeyboardRemove()
    )
    # await rq.add_overwork(message.from_user, message.from_user.id)


@router.message(NewAccounting.accounting_name)
async def set_accounting_name(message: Message,  state: FSMContext) -> None:
    await state.update_data(accounting_name=message.text)
    data = await state.get_data()
    await rq.add_accounting(data['accounting_name'],
                            message.from_user.id
                            )
    await message.answer(
        f"–ù–æ–≤—ã–π —É—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∞—à–∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏, –ø–µ—Ä–µ–π–¥—è –≤ —Ä–∞–∑–¥–µ–ª '–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫'. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —É—á—ë—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π. üìù‚ú®", reply_markup=keyboard.main)
    await state.clear()


@router.message(F.text == '–í—Å–µ —É—á—ë—Ç—ã üíº')
async def get_overwork(message: Message):
    await message.answer('–í—ã–±–∏—Ä–∏—Ç–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
                         reply_markup=await keyboard.overwork(message.from_user.id))


@router.callback_query(F.data.startswith('overwork_'))
async def get_overwoks_data(callBack: CallbackQuery, state: FSMContext):
    accounting_id = callBack.data.split('_')[1]
    await callBack.message.answer('–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫: ',
                                  reply_markup= await keyboard.overwork_data(callBack.data.split('_')[1]))
    await callBack.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=await keyboard.overwork_data_regular())
    await state.update_data(accounting_id=accounting_id)

@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É')
async def add_overwork(message: Message,  state: FSMContext):
    await state.set_state(NewOverWork.date)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º", reply_markup=types.ReplyKeyboardRemove()
    )


@router.message(NewOverWork.date)
async def set_date(message: Message, state: FSMContext) -> None:
    await state.update_data(date=message.text)
    await state.set_state(NewOverWork.work_name)
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏", reply_markup=types.ReplyKeyboardRemove()
    )


@router.message(NewOverWork.work_name)
async def set_work_name(message: Message, state: FSMContext) -> None:
    await state.update_data(work_name=message.text)
    await state.set_state(NewOverWork.sum)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞–±–æ—Ç—ã", reply_markup=types.ReplyKeyboardRemove()
    )


@router.message(NewOverWork.sum)
async def set_date(message: Message, state: FSMContext) -> None:
    await state.update_data(sum=message.text)
    await state.set_state(NewOverWork.budget)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —á–µ–π –±—ã–ª –±—é–¥–∂–µ—Ç", reply_markup=types.ReplyKeyboardRemove()
    )


@router.message(NewOverWork.budget)
async def set_budget(message: Message, state: FSMContext) -> None:
    await state.update_data(budget=message.text)
    data = await state.get_data()
    await rq.add_overwork(  data['date'],
                            data['work_name'],
                            data['sum'],
                            data['budget'],
                            data['accounting_id']
                            )
    await message.answer(
        f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã:)", reply_markup=keyboard.main)
    await state.clear()


@router.message(F.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é')
async def back_to_main(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—á–∫—É", reply_markup=keyboard.main)