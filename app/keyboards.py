from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton
from app.database.requests import get_accountings, get_overworks_data, get_overwork
from aiogram.utils.keyboard import  InlineKeyboardBuilder

main = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—á–µ—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫ üìä')],
                                    [KeyboardButton(text='–í—Å–µ —É—á—ë—Ç—ã üíº')],
                                    [KeyboardButton(text='–í—ã–≤–æ–¥ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫ –≤ Ex—Åel üìà'),]],
                           resize_keyboard= True,
                           input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é....')


new_accounting = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏')]],
                           resize_keyboard= True,
                           input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é....')


add_overwork = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É')]],
                        resize_keyboard=True,
                        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é....')

skip_button = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')]],
                        resize_keyboard=True,
                        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é....')

accounting_buttons = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–µ—Ç–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–æ–∫ ‚úèÔ∏è')],
                                                   [KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —É—á—ë—Ç üóëÔ∏è')],
                                                   [KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é')],
                                                   ],
                        resize_keyboard=True,
                        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é....')
async def accountings(user_id):
    all_accountings = await get_accountings(user_id)
    keyboard = InlineKeyboardBuilder()

    for accounting in all_accountings:
        keyboard.add(InlineKeyboardButton(text=f"{accounting.name}", callback_data=f"overwork_{accounting.id}"))

    return keyboard.adjust(1).as_markup()

async def export_to_excel(user_id):
    all_accountings = await get_accountings(user_id)
    keyboard = InlineKeyboardBuilder()

    for accounting in all_accountings:
        keyboard.add(InlineKeyboardButton(text=f"{accounting.name}", callback_data=f"export_excel_{accounting.id}"))

    return keyboard.adjust(1).as_markup()

async def delete_accountings(user_id):
    all_accountings = await get_accountings(user_id)
    keyboard = InlineKeyboardBuilder()

    for accounting in all_accountings:
        keyboard.add(InlineKeyboardButton(text=f"{accounting.name}", callback_data=f"delete_{accounting.id}"))

    return keyboard.adjust(1).as_markup()

async def change_accountings(user_id):
    all_accountings = await get_accountings(user_id)
    keyboard = InlineKeyboardBuilder()

    for accounting in all_accountings:
        keyboard.add(InlineKeyboardButton(text=f"{accounting.name}", callback_data=f"change_{accounting.id}"))

    return keyboard.adjust(1).as_markup()
async def overwork_data(overwork_id):
    all_overworks_data = await get_overworks_data(overwork_id)

    if all_overworks_data == '':
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="–ó–¥–µ—Å—å –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æüò≠"))
        return keyboard.as_markup()

    keyboard = InlineKeyboardBuilder()

    for data in all_overworks_data:
        formatted_date = data.date.strftime("%d.%m")
        keyboard.add(InlineKeyboardButton(text=f'{formatted_date} - {data.work} - {data.sum} —Ä—É–± - {data.budget}', callback_data=f"data_{data.id}"))

    return keyboard.adjust(1).as_markup()


async def overwork_data_regular():
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    regular_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É')],
            [KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é')]
        ],
        resize_keyboard=True
    )

    return regular_keyboard

async def overwork_data_action(overwork_id):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text=f"–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"overworkchange_{overwork_id}"))
    keyboard.add(InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å", callback_data=f"overworkdelete_{overwork_id}"))
    return keyboard.adjust(1).as_markup()

skip_and_cancel = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–û—Ç–º–µ–Ω–∞')],
                                       [KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')]],  resize_keyboard=True,)

cancel = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–û—Ç–º–µ–Ω–∞')],
                                                   ],  resize_keyboard=True,)

on_main = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é')],
                                                   ],  resize_keyboard=True,)

